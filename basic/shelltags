#!/bin/bash

export PROMPT_COMMAND="shelltags $*"

shelltags() {
	# needs to be the very first thing to not lose the exit code
	local EXITSTATUS="$?"

	# change bash default to a better one (based in fedora's /etc/bashrc)
	[ "$PS1" = "\\s-\\v\\\$ " ] && PS1="[\u@\h \W]\\$ "

	# save original prompt if necessary and clean it
	[ -z "$PS1_ORIGINAL" ] && PS1_ORIGINAL=$PS1
	PS1=

	# set screen window title
	[[ $TERM =~ screen.* ]] && PS1+='\[\033k\033\\\]'

	# check and set parameters
	while getopts tesglfmb OPT; do
		case $OPT in
			t) PS1+="$(shelltags_tag 'time')";;
			e) PS1+="$(shelltags_tag 'error' $EXITSTATUS)";;
			s) PS1+="$(shelltags_tag 'screen')";;
			g) PS1+="$(shelltags_tag 'git')";;
			l) PS1+="$(shelltags_tag 'load')";;
			f) PS1+="$(shelltags_tag 'freespace')";;
			m) PS1+="$(shelltags_tag 'temperature')";;
			b) PS1+="$(shelltags_tag 'battery')";;
		esac
	done
	shift $((OPTIND-1))
	OPTIND=0


	# the last item is the prompt, use original if none
	[ -n "$*" ] && PROMPT="$*" || PROMPT="$PS1_ORIGINAL"
	PS1+="$(shelltags_tag 'prompt' "$PROMPT")"

	# if not screen, set a title for the terminal
	if [ -z "$STY" ]; then
		KERNEL=$(uname -r)
		LOAD=$(awk '{ print $1 }' /proc/loadavg)
		echo -ne "\033]0;$HOSTNAME ($KERNEL) | $LOAD | ${PWD/$HOME/~}\007"
	fi
}

shelltags_tag() {
	local COLOR=
	local OUTPUT=

	# checks
	case $1 in
		temperature|battery) [ ! -x "/usr/bin/acpi" ] && return ;;
	esac

	# execute tag
	case $1 in
		time)   COLOR=cyan;  OUTPUT="\A" ;;
		error)  COLOR=red;   [ "$2" != "0" ] && OUTPUT=$2 ;;
		screen) COLOR=green; OUTPUT=$(echo $STY | cut -d. -f2) ;;

		load)
			COLOR=magenta
			local PROCESSOR=$(grep -c ^processor /proc/cpuinfo)
			local CURLOAD=$(cat /proc/loadavg | cut -d' ' -f1)
			local CURLOAD_INT=$(cat /proc/loadavg | cut -d'.' -f1)
			[ "$CURLOAD_INT" -ge "$PROCESSOR" ] && OUTPUT="$CURLOAD"
			;;

		freespace)
			COLOR=magenta
			if df > /dev/null 2>&1; then
				local FREE_SPACE=$(stat -f --printf="%a * %s\n" "$PWD" | bc)
				local CRITICAL=$(stat -f --printf="%b * %s * 0.1\n" "$PWD" | bc)
				local CRITICAL_INT=$(echo $CRITICAL | cut -d. -f1)
				[ "$FREE_SPACE" -gt "$CRITICAL_INT" ] && return

				if [ "$FREE_SPACE" -gt "1073741824" ]; then
					OUTPUT=$(( $FREE_SPACE / ( 1024**3 )))GB
				elif [ "$FREE_SPACE" -gt "1048576" ]; then
					OUTPUT=$(( $FREE_SPACE / ( 1024**2 )))MB
				elif [ "$FREE_SPACE" -gt "1024" ]; then
					OUTPUT=$(( $FREE_SPACE / ( 1024**1 )))KB
				else
					OUTPUT=${FREE_SPACE}B
				fi
			fi
			;;

		temperature)
			COLOR=magenta
			OUTPUT=$(acpi -t 2> /dev/null | cut -d' ' -f4 | cut -d. -f1)
			[ -z "$OUTPUT" ] && return
			[ "$OUTPUT" -lt 70 ] && return
			OUTPUT+=Â°
			;;

		battery)
			# support for multiple batteries (like Lenovo T460)
			COLOR=magenta
			OUTPUT=$(acpi -b 2> /dev/null | cut -d' ' -f4 | xargs | tr -d ,)
			[ -z "$OUTPUT" ] && return
			[ "$(echo $OUTPUT | tr -d % | tr ' ' + | bc)" -ge "50" ] && return
			;;

		git)
			local GIT=$(git status --short --branch 2> /dev/null | grep '^##')
			local GITSTATE=
			if [ -n "$GIT" ]; then
				COLOR=blue
				OUTPUT=$(echo $GIT | cut -d' ' -f2 | sed 's/\.\.\..*$//g')
				GITSTATE=$(echo $GIT | awk 'NR>1{print $1}' RS=[ FS=])
				GITSTATE=${GITSTATE/behind /-}
				GITSTATE=${GITSTATE/ahead /+}
				GITSTATE=${GITSTATE/,/}
				[ -n "$GITSTATE" ] && OUTPUT+=" $GITSTATE"
				GITSTASH=$(git stash list 2> /dev/null | wc -l)
				[ "$GITSTASH" != 0 ] && OUTPUT+=" {$GITSTASH}"
			fi
			;;

		prompt)
			if grep -q 'emulated by qemu' /proc/cpuinfo; then
				COLOR=magenta
			elif [ -n "$SSH_CLIENT" ]; then
				COLOR=green
			else
				COLOR=yellow
			fi
			OUTPUT="$2"
			;;
	esac

	[ -z "$OUTPUT" ] && return

	case $COLOR in
		black)   COLOR=0;;
		red)     COLOR=1;;
		green)   COLOR=2;;
		yellow)  COLOR=3;;
		blue)    COLOR=4;;
		magenta) COLOR=5;;
		cyan)    COLOR=6;;
		white|*) COLOR=7;;
	esac

	local FG="\[\033[1;$(( $COLOR + 30 ))m\]"
	local BG="\[\033[$(( $COLOR + 40 ))m\]"
	local UN="\[\033[0m\]"
	local WH="\[\033[1;37m\]"

	if [ "$1" != "prompt" ]; then
		echo -en "${BG}${FG}[${WH}${OUTPUT}${FG}]${UN} "
	else
		echo -en "${FG}${OUTPUT}${UN}"
	fi
}
